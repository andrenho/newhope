@startuml

' 
' classes relationships
'
World  -->  "*" Person : people
World  -->  "*" City : cities
World  -->  "*" Car : cars
City   -->  "*" Building : __buildings
Building -- enum BuildingType
Person <|-- Player
Person <|-- Shopkeeper

Person --> "1" Car : car
Car --> "1" Person : owner

package buildinglayout <<Rect>> {
  class 0_1 << (S,lavender) >>
}
Building --> buildinglayout

package citylayout <<Rect>> {
  class layout_1 << (S,lavender) >>
}
City --> citylayout
citylayout .. enum BuildingType

Car *-- CarModel : __model
Car *-- CarControls : controls
Car *-- CarPhysics : __physics

World -- enum Block

'
' classes definitions
'
class World {
  +w, h
  -- Action --
  +new(w, h)
  +step()
  .. Information ..
  +tiles(x,y)
  +person_in_position(x,y)
  +people_in_area(x1,y1,x2,y2)
  +cars_in_area(x1,y1,x2,y2)
  +unique_tile_id(x,y)
  +revert_unique_tile(id)
  +tile_walkable(x,y)
}

abstract class Person {
  +x, y
  +image
  +direction
  +in_car
  #__speed
  +turn_to(dir)
  +change_speed(sp)
  +id()
  +step()
  +can_talk()
  +polygon()
  +acquire_car(car)
  +exit_car()
  #{abstract} type()
  #{abstract} __respond()
  #__init(x,y)
  #__move()
  #__can_move(fx,fy)
}

class Player {
  +new(x,y)
  #type()
  #__move()
}

class Shopkeeper {
  +new(x,y)
  #type()
  #__respond()
}

class Car {
  +x,y
  +attrib
  +direction
  +new(x,y,model)
  +step()
  +polygon()
  +direction()
}

class CarControls << (S,lavender) >> {
  +accelerate
  +breaking
  +left
  +right
}
hide CarControls methods

class CarPhysics {
  +direction
  +new(controls, attributes)
  +next_frame()
}

class CarModel << (S,lavender) >> {
  +id
  +w,h
  +gears
  +max_speed_gears
  +max_steering_angle
}
hide CarModel methods

class City {
  +x, y
  +basic_block
  +new(layout,x,y,w,h,basic_block)
  +tiles(x,y)
}

class Building {
  +x, y, w, h
  +new(btype,layout,x,y)
  +tiles(x,y)
}

class Block {
  +id
  +description
  +friction
  +immaterial
  {static} +all
  {static} +init(description, friction, immaterial)
}

enum BuildingType {
  HOUSE
  . . .
}
hide enum BuildingType methods

hide enum layout_1 members
hide enum layout_1 methods
hide enum 0_1 members
hide enum 0_1 methods

@enduml
