@startuml

scale 5/6

'
' inheritance
'

Object <|-- DynamicPerson
Object <|-- StaticPerson
Object <|-- Car
DynamicPerson <|-- Player

' 
' classes relations
'
package game {
  class Game
}

main ()- Game
Game -- World
World --> "*" City : cities
World --> "*" Object: objects

City   -->  "*" Building : __buildings
Building -- enum BuildingType

package buildinglayout <<Rect>> {
  class 0_1 << (S,lavender) >>
}
Building --> buildinglayout

package citylayout <<Rect>> {
  class layout_1 << (S,lavender) >>
}
City --> citylayout
citylayout .. enum BuildingType

World -- enum Block

'
' classes definitions
'
class Game {
  +new(world, callbacks)
  +start()
}

class World {
  +new()
  +initialize()
  +step()
  +add_object(obj)
  +tiles(x,y)
  +objects_in_area(x1,y1,x2,y2)
  +unique_tile_id(x,y)
  +revert_unique_tile(id)
  +tile_walkable(x,y)
  +debug()
  +predefined_tiles
}

abstract class Object {
  +x,y
  -__init(x,y)
  +body : c_ptr
  +step()
  +{abstract} create_physics_body()
}

class DynamicPerson {
  +create_physics_body() : C
  +set_target(x,y) : C
}

class StaticPerson {
  +create_physics_body() : C
}

class Player {
  +new(x,y)
  +collision(against)
  +step()
  +setup_collision_handler() : C
}

class City {
  +x, y
  +basic_block
  +new(layout,x,y,w,h,basic_block)
  +tiles(x,y)
}

class Building {
  +x, y, w, h
  +new(btype,layout,x,y)
  +tiles(x,y)
}

class Block {
  +id
  +description
  +friction
  +immaterial
  {static} +all
  {static} +init(description, friction, immaterial)
}

enum BuildingType {
  HOUSE
  . . .
}
hide enum BuildingType methods

hide enum layout_1 members
hide enum layout_1 methods
hide enum 0_1 members
hide enum 0_1 methods

@enduml
