@startuml

' 
' classes relationships
'
World  -->  "*" Person : people
World  -->  "*" City : cities
World  -->  "*" Car : cars
World  -->  "1" TalkQueue: talk_queue
City   -->  "*" Building : __buildings
Building -- enum BuildingType
Person <|-- Player
Person <|-- Shopkeeper

package buildinglayout <<Rect>> {
  enum 0_1
}
Building -- buildinglayout

package citylayout <<Rect>> {
  enum layout_1
}
City -- citylayout
citylayout .. enum BuildingType

Car *-- CarModel

World *-- enum Block

package util {
  class funct << (M,orchid) >>
  class modules << (M,orchid) >>
  class strict << (M,orchid) >>
  class string << (M,orchid) >>
  class table << (M,orchid) >>
  package geo {
    class Point
    class Line
    class Polygon
    Line --> "2" Point: p1, p2
    Polygon --> "*" Line: lines
  }
}

'
' classes definitions
'
class World {
  +w, h
  -- Action --
  +new(w, h)
  +step()
  .. Information ..
  +tiles(x,y)
  +person_in_position(x,y)
  +people_in_area(x1,y1,x2,y2)
  +cars_in_area(x1,y1,x2,y2)
  +unique_tile_id(x,y)
  +revert_unique_tile(id)
  +tile_walkable(x,y)
}

abstract class Person {
  +x, y
  +image
  +direction
  #__speed
  +turn_to(dir)
  +change_speed(sp)
  +id()
  +step()
  +can_talk()
  #{abstract} type()
  #{abstract} __respond()
  #__init(x,y)
  #__move()
  #__can_move(fx,fy)
}

class Player {
  +new(x,y)
  #type()
  #__move()
}

class Shopkeeper {
  +new(x,y)
  #type()
  #__respond()
}

class Car {
  +new(x,y,model)
  +step()
}

enum CarModel {
  . . .
}

class City {
  +x, y
  +basic_block
  +new(layout,x,y,w,h,basic_block)
  +tiles(x,y)
}

class Building {
  +x, y, w, h
  +new(btype,layout,x,y)
  +tiles(x,y)
}

enum Block {
  WATER
  GRASS
  WOODEN_WALL
  FLOOR
  . . .
}
hide enum Block methods

enum BuildingType {
  HOUSE
  . . .
}
hide enum BuildingType methods

hide enum layout_1 members
hide enum layout_1 methods
hide enum 0_1 members
hide enum 0_1 methods

class Callback {
  +[fct_name](parameters)
  +new()
  +install(name, fct)
  +{static} missing
}

class funct {
  +filter(table,func)
  +map(table,func)
  +min(table,func)
  +max(table,func)
}

class modules {
  +require(mod)
}

class string {
  +wrap(columns)
}

class table {
  +find(element)
  +shallow_copy(tbl)
}

class Point {
  +x,y
  +new(x,y)
}

class Line {
  +new(p1,p2)
}

class Polygon {
  +new(lines)
  +collides()
}

@enduml
